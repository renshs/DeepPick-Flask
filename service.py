import pandas as pd
import numpy as np
import fasttext

import pymorphy2
from autocorrect import Speller
import spacy

# import numpy as np
# import ssl
# import gensim
# from gensim.models.callbacks import CallbackAny2Vec
import xgboost as xgb


# from sklearn.linear_model import LogisticRegression
# from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
# from sklearn.model_selection import train_test_split
# from sklearn.metrics import accuracy_score
# from sklearn.metrics import f1_score

GROUPS_ENCODE = {
    "Электроснабжение": 0,
    "Экономика и бизнес": 1,
    "Экология": 2,
    "Физическая культура и спорт": 3,
    "Торговля": 4,
    "Строительство и архитектура": 5,
    "Спецпроекты": 6,
    "Социальное обслуживание и защита": 7,
    "Связь и телевидение": 8,
    "Роспотребнадзор": 9,
    "Погребение и похоронное дело": 10,
    "Памятники и объекты культурного наследия": 11,
    "Общественный транспорт": 12,
    "Образование": 13,
    "Мусор/Свалки/ТКО": 14,
    "Мобилизация": 15,
    'МФЦ "Мои документы"': 16,
    "Культура": 17,
    "Коронавирус": 18,
    "Здравоохранение/Медицина": 19,
    "ЖКХ": 20,
    "Дороги": 21,
    "Государственная собственность": 22,
    "Газ и топливо": 23,
    "Благоустройство": 24,
    "Безопасность": 25,
}

PERFORMESR_ENCODE = {
    "АО ПРО ТКО": 0,
    "Александровский муниципальный округ Пермского края": 1,
    "Бардымский муниципальный округ Пермского края": 2,
    "Город Пермь": 3,
    "Губахинский городской округ": 4,
    "ИГЖН ПК": 5,
    "Лысьвенский городской округ": 6,
    "Министерство здравоохранения": 7,
    "Министерство образования": 8,
    "Министерство социального развития ПК": 9,
}

TOPICS_ENCODE = {
    "Дети и многодетные семьи": 0,
    "Неудовлетворительные условия проезда в транспорте на действующем маршруте": 1,
    "★ Протечки с кровли (системы водостока)": 2,
    "★ Оказание медицинской помощи не в полном объеме/отказ в оказании медицинской помощи": 3,
    "Ошибки врачей, халатность": 4,
    "Задержка выплат гражданам": 5,
    "Оказание гос. соц. помощи": 6,
    "★ Нарушение правил очистки дорог от снега и наледи/Обращения о необходимости очистить тротуар от снега и наледи": 7,
    "Жалобы на управляющие компании": 8,
    "Поддержка семей мобилизованных": 9,
    "Отсутствие электричества": 10,
    "Отлов безнадзорных собак и кошек": 11,
    "★ Ненадлежащее содержание зеленых насаждений (газонов)/деревьев и кустарников": 12,
    "Проблемы с контейнерами": 13,
    "★ Парковка на газонах": 14,
    "Содержание больниц": 15,
    "Благоустройство общественного пространства (парк, сквер, пешеходная зона, бульвар, набережная, центральная улица или площадь)": 16,
    "Плата за вывоз ТКО": 17,
    "Технические проблемы с записью на прием к врачу": 18,
    "Некорректное поведение водительского состава": 19,
    "Ненадлежащее качество или отсутствие отопления": 20,
    "Плата за ЖКУ и работа ЕИРЦ": 21,
    "Тесты на коронавирус": 22,
    "Социальная поддержка медперсонала": 23,
    "Ремонт дороги": 24,
    "Дистанционное образование": 25,
    "Аварийное жилье/переселение": 26,
    "★ Неисправные фонари освещения": 27,
    "Порядок и пункты вакцинации": 28,
    "Сертификаты и QR-коды": 29,
    "★ Нарушение правил уборки от снега и наледи внутридворового проезда, тротуара, площади": 30,
    "Нарушение правил проведения земляных работ": 31,
    "Перепланировка и реконструкция помещений": 32,
    "Профильный осмотр": 33,
    "Строительство зданий": 34,
    "Отсутствие холодной воды": 35,
    "Организация парковок": 36,
    "Льготы на проезд и тарифы": 37,
    "Нехватка материально-технического обеспечения": 38,
    "Предложение по благоустройству": 39,
    "Безопасность общественных пространств": 40,
    "Проблемы с социальными картами или проездными документами": 41,
    "Создание доступной среды для инвалидов": 42,
    "★ Информационно-техническая поддержка": 43,
    "Ненадлежащее содержание и эксплуатация МКД": 44,
    "Отсутствие детских площадок": 45,
    "Нехватка или сокращение врачей и медицинских учреждений": 46,
    "★ Открытые канализационные люки": 47,
    "Отсутствие фонарей освещения": 48,
    "Борщевик Сосновского": 49,
    "Учреждения культуры": 50,
    "Диспансеризация": 51,
    "Очередь": 52,
    "Региональное имущество": 53,
    "Коронавирус": 54,
    "Спецпроекты": 55,
    "Сборы за капитальный ремонт": 56,
    "★ Уборка/Вывоз мусора": 57,
    "Содержание, ремонт и обустройство тротуаров": 58,
    "Уборка территорий": 59,
    "★ Засор в общедомовой системе водоотведения (канализации)": 60,
    "★ Нарушение правил уборки и вывоза загрязненного снега и наледи на газоне": 61,
    "Изменение класса и количества автобусов": 62,
    "Соц.обслуживание прочее": 63,
    "Ремонт подъездов": 64,
    "Раздельная сортировка отходов": 65,
    "Завышение платы за коммунальные услуги": 66,
    "Беженцы": 67,
    "График движения общественного транспорта": 68,
    "Улучшение жилищных условий": 69,
    "Здравоохранение прочее": 70,
    "Отсутствие лекарств в аптеках": 71,
    "Ненадлежащая уборка подъездов и лифтов": 72,
    "Добавить новый маршрут": 73,
    "Ремонт спортивных учреждений": 74,
    "Содержание гос. образовательных организаций": 75,
    "Отсутствие горячей воды": 76,
    "Плохое качество воды": 77,
    "Строительство школ, детских садов": 78,
    "Пробки": 79,
    "Хамство медицинских работников": 80,
    "★ Скорая помощь": 81,
    "Сроки газификации": 82,
    "Проблемы в работе горячих линий": 83,
    "Жалобы на врачей": 84,
    "Отсутствие аптек": 85,
    "Занятость и трудоустройство": 86,
    "Ямы и выбоины на дороге": 87,
    "★ Отсутствие контейнерной площадки/Проезд к контейнерной площадке": 88,
    "Подтопление автомобильных дорог": 89,
    "Благоустройство придомовых территорий": 90,
    "★ Наледь и сосульки на кровле": 91,
    "Проблемы с отоплением детских садов и школ": 92,
    "★ Стихийные свалки в городе/в парках/в лесу": 93,
    "Освещение неисправно или отсутствует": 94,
    "Содержание дорожных знаков/Установка новых дорожных знаков, с внесением в схему дислокации, замена старых знаков на новые": 95,
    "Образовательный процесс": 96,
    "★ Нарушение правил уборки и вывоза порубочных остатков": 97,
    "Льготные лекарства": 98,
    "Вырубка деревьев, кустарников": 99,
    "Качество электроснабжения": 100,
    "Устройство в ДОУ": 101,
    "Разрушение тротуаров и пешеходных дорожек": 102,
    "Детские оздоровительные лагеря": 103,
    "Предложить установку нового лежачего полицейского (ИДН)": 104,
    "Вакцинация": 105,
    "Зарплата, компенсации, поощрения, выплаты": 106,
    "★ Прорыв трубы/трубопровода": 107,
    "Выброс мусора нарушителем": 108,
    "Изменить или отменить маршрут": 109,
    "Обустройство асфальтового покрытия парковки, внутридворового проезда, тротуара, пешеходной дорожки, въезда во двор": 110,
    "Парки и зоны отдыха": 111,
    "★ Ненадлежащее состояние игровых элементов на детской или спортивной площадке": 112,
    "Трудоустройство": 113,
    "★ Нарушение правил уборки от снега и наледи территории парка и сквера": 114,
    "Некачественно выполненный ремонт дорог": 115,
    "Доступность вакцин": 116,
    "Зарплата учителей": 117,
    "Некачественный капитальный ремонт": 118,
    "Предложения по созданию лечебных центров": 119,
    "Питание": 120,
    "Состояние зданий учреждений и организаций": 121,
    "Работа светофора (установка, изменение режима работы, оборудование кнопкой вызова)": 122,
    "Содержание остановок": 123,
    "★ Нестационарная торговля (киоски, павильоны, сезонная торговля)": 124,
    "★ Ямы во дворах": 125,
    "Отсутствие остановочных пунктов": 126,
    "Отсутствие общественных туалетов": 127,
    "Пенсионеры и ветераны": 128,
    "Подключение к водоснабжению": 129,
    "★ Несоблюдение правил уборки проезжей части": 130,
    "★ Затопление подъездов, подвальных помещений": 131,
    "★ Отсутствие урн, лавочек в общественных местах и дворовой территории": 132,
    "Стоимость, оплата и возврат средств на газификацию": 133,
    "Ремонт/строительство мостов": 134,
    "Строительство или реконструкция дорог": 135,
    "Безопасность образовательного процесса": 136,
    "Ливневые канализации (строительство и реконструкция)": 137,
    "Строительство объектов по обращению с отходами": 138,
    "★ Питание в медицинских учреждениях": 139,
    "Самоизоляция и карантин": 140,
    "Организация переходов, светофоров/Изменить организацию движения": 141,
    "Строительство спортивной инфраструктуры": 142,
    "Социальные учреждения": 143,
    "★ Нарушение правил уборки внутридворового проезда, пешеходной дорожки": 144,
    "★ Просьбы о лечении": 145,
    "Низкая заработная плата врачей": 146,
    "Запрос на газификацию и её условия": 147,
    "Необходима установка и замена дорожных ограждений": 148,
    "Несанкционированное ограничение движения, помехи движению, захват земли в полосе отвода автодорог": 149,
    "Низкая температура воды/слабое давление": 150,
    "Матери-одиночки, подростки": 151,
    "★ Нарушение правил уборки от снега и наледи детской игровой и спортивной площадки": 152,
    "Цены и ценообразование": 153,
    "Нехватка мест в школах": 154,
    "Инвалиды": 155,
    "Социальная поддержка учителей": 156,
    "Отсутствие лекарств в стационарах": 157,
    "★ Подтопление территории": 158,
    "Архитектура города": 159,
    "Другие проблемы с общедомовой системой водоотведения (канализации)": 160,
    "Строительство социальных объектов": 161,
    "Памятники и объекты культурного наследия": 162,
    "Дезинфекция МКД": 163,
    "ВУЗы и ССУЗы": 164,
    "Коронавирусные ограничения": 165,
    "Выбросы вредных веществ в водоёмы/загрязнение водоёмов": 166,
    "Дополнительное образование": 167,
    "Ненадлежащее состояние фасадов нежилых зданий, объектов и ограждений": 168,
    "Общее впечатление": 169,
    "Установка ограждений, препятствующих въезду на тротуар, газон на дворовой территории МКД": 170,
    "Санитарно-эпидемиологическое благополучие": 171,
    "Восстановление газоснабжения": 172,
    "Залитие квартиры": 173,
    "Непригодные для проживания жилые помещения": 174,
    "Погребение и похоронное дело": 175,
    "Культурно-досуговые мероприятия": 176,
    "Обработка и уничтожение грызунов (дератизация)": 177,
    "Пешеходные переходы и жд переезды": 178,
    "Лифт неисправен или отключен": 179,
    "Волонтерство": 180,
    "Кадровые перестановки": 181,
    'МФЦ "Мои документы"': 182,
    "Государственные услуги": 183,
    "Предложение дороги в план ремонта": 184,
    "Спортивные мероприятия": 185,
    "★ Несанкционированные надписи, рисунки, реклама на фасаде МКД": 186,
    "Выбросы вредных веществ в атмосферу/загрязнение воздуха": 187,
    "Выплаты стипендий": 188,
    "Неисправность выступающих конструкций: балконов, козырьков, эркеров, карнизов входных крылец и т. п.": 189,
    "Самовольная установка ограждений на территории общего пользования": 190,
    "Нарушение технологии и (или) сроков производства работ": 191,
    "ЕГЭ, ОГЭ": 192,
    "★ Некачественно нанесенная разметка на проезжей части": 193,
    "★ Повреждение опор ЛЭП": 194,
}


FILE_NAME = "small_dt.csv"
MODEL_FASTTEXT = "fasttext1.bin"
MODEL_GROUPS = "xgb_groups1.json"
MODEL_PERFORMER = "xgb_isp1.json"
MODEL_TOPIC = "xgb_topics1.json"


class Preprocessor:
    def __init__(
        self,
        path_to_csv: str,
        path_to_model_groups: str,
        path_to_model_prefromer: str,
        path_to_model_topic: str,
        path_to_model_fasttext: str,
    ):
        self.spell = Speller("ru")
        self.morph = pymorphy2.MorphAnalyzer()

        self.data = pd.read_csv(path_to_csv, sep=";")

        self.model_fasttext = self.load_model_fasttext(path_to_model_fasttext)
        self.model_xgb_groups = self.load_model_xgb_groups(
            path_to_model_groups
        )
        self.model_xgb_performer = self.load_model_xgb_performer(
            path_to_model_prefromer
        )
        self.model_xgb_topic = self.load_model_xgb_topic(path_to_model_topic)
        self.nlp = spacy.load("ru_core_news_md")

        self.process_data()

    def process_data(self):
        self.data["Текст инцидента"] = self.data[
            "Текст инцидента"
        ].str.replace("[\(\[].*?[\)\]]", "", regex=True)
        self.data.loc[:, "lemm"] = self.data.apply(
            lambda x: self.lemmatize(self.spell(x["Текст инцидента"])), axis=1
        )
        self.data["fasttext"] = self.data.apply(
            lambda x: self.encode(x["lemm"]), axis=1
        )

    def lemmatize(self, text) -> str:
        words = text.split()
        res = list()
        for word in words:
            p = self.morph.parse(word)[0]
            res.append(p.normal_form)
        return " ".join(res)

    @staticmethod
    def load_model_xgb_groups(path: str):
        model = xgb.XGBClassifier()
        model.load_model(path)
        return model

    @staticmethod
    def load_model_xgb_performer(path: str):
        model = xgb.XGBClassifier()
        model.load_model(path)
        return model

    @staticmethod
    def load_model_xgb_topic(path: str):
        model = xgb.XGBClassifier()
        model.load_model(path)
        return model

    @staticmethod
    def load_model_fasttext(path: str):
        return fasttext.load_model(path)

    def encode(self, text):
        return np.array([self.model_fasttext[i] for i in text.split()]).mean(
            axis=0
        )

    @staticmethod
    def find_index(array):
        sum = 0
        i = 0
        while sum <= 0.95 and i <= 10:
            sum += array[i][0]
            i += 1
        return i

    def ner_text(self, text):
        doc = self.nlp(text)

        result = {}
        for ent in doc.ents:
            if ent.label_ not in result:
                result[ent.label_] = [ent.text]
            else:
                result[ent.label_].append(ent.text)
        return result

    def get_groups_web(self, text):
        text_lemmatized = self.lemmatize(self.spell(text))
        text_encoded = self.encode(text_lemmatized)
        pred = self.model_xgb_groups.predict_proba([list(text_encoded)])
        paired_pred = sorted(
            list(zip(list(pred[0]), GROUPS_ENCODE.keys())),
            key=lambda x: x[0],
            reverse=True,
        )
        bound = self.find_index(paired_pred)

        return list(zip(*paired_pred[:bound]))[1]

    def get_performers_web(self, text):
        text_lemmatized = self.lemmatize(self.spell(text))
        text_encoded = self.encode(text_lemmatized)
        pred = self.model_xgb_performer.predict_proba([list(text_encoded)])
        paired_pred = sorted(
            list(zip(list(pred[0]), PERFORMESR_ENCODE.keys())),
            key=lambda x: x[0],
            reverse=True,
        )
        bound = self.find_index(paired_pred)

        return list(zip(*paired_pred[:bound]))[1]

    def get_topics_web(self, text):
        text_lemmatized = self.lemmatize(self.spell(text))
        text_encoded = self.encode(text_lemmatized)
        pred = self.model_xgb_topic.predict_proba([list(text_encoded)])
        paired_pred = sorted(
            list(zip(list(pred[0]), TOPICS_ENCODE.keys())),
            key=lambda x: x[0],
            reverse=True,
        )
        bound = self.find_index(paired_pred)

        return list(zip(*paired_pred[:bound]))[1]

    def get_groups(self):
        groups = [
            sorted(
                list(zip(list(i), GROUPS_ENCODE.keys())),
                key=lambda x: x[0],
                reverse=True,
            )[0][1]
            for i in self.model_xgb_groups.predict_proba(
                list(self.data.fasttext.values)
            )
        ]
        return groups

    def get_performers(self):
        performers = [
            sorted(
                list(zip(list(i), list(PERFORMESR_ENCODE.keys()))),
                key=lambda x: x[0],
                reverse=True,
            )[0][1]
            for i in self.model_xgb_performer.predict_proba(
                list(self.data.fasttext.values)
            )
        ]

        return performers

    def get_topics(self):
        topics = [
            sorted(
                list(zip(list(i), list(TOPICS_ENCODE.keys()))),
                key=lambda x: x[0],
                reverse=True,
            )[0][1]
            for i in self.model_xgb_topic.predict_proba(
                list(self.data.fasttext.values)
            )
        ]

        return topics

    def front_info(self, text: str):
        return {
            "recipients": self.get_performers_web(text),
            "theme_groups": self.get_groups_web(text),
            "themes": self.get_topics_web(text),
            "text": "",
            "entities": self.ner_text(text),
        }


d = Preprocessor(
    FILE_NAME, MODEL_GROUPS, MODEL_PERFORMER, MODEL_TOPIC, MODEL_FASTTEXT
)

# print(d.get_performers(), d.data["Исполнитель"])
# q = []
# for i, j in zip(d.get_topic(), d.data["Тема"]):
#     q.append(i == j)
# print(sum(q))
n = 7
print(
    d.get_groups_web(d.data["Текст инцидента"].values[n]),
    d.front_info((d.data["Текст инцидента"].values[n]))
)
print()